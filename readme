Assignment 3 readme File

------------------------------------------------------------------------
What is your name?

James Swinehart

------------------------------------------------------------------------
What authorized sources of information did you use to complete the
assignment? COPY THE LIST of authorized sources of information given
in the "Policies" web page (also available on armlab in the file
~cos217/AuthorizedSourcesList ) to this section of the readme file,
and edit it as appropriate.

The course's lectures.

The course's precepts.

The course's website.

Documents that are referenced directly by the course's website. Such 
documents include the course's lecture slides and precept handouts.

The course's textbooks and reference manuals.

------------------------------------------------------------------------
What unauthorized sources of information did you use to complete the
assignment? List any unauthorized sources of information that you used
to complete the assignment, and describe how you used them. The course
"Policies" web page defines unauthorized sources of information, and
any source that you have used but not listed in the authorized sources
should be included here. Please note that using an unauthorized source
may trigger a course penalty, and depending on the nature of the
interaction, may additionally require the interaction being reported
to the Committee on Discipline. Write "None" if you used no
unauthorized sources of information.

None
------------------------------------------------------------------------
In fulfillment of the requirement from section 2.4.3 of the Academic
Regulations in Princeton's Rights, Rules, Responsibilities guide,
enter your name in the space below the following affirmation:

This paper represents my own work in accordance with University
regulations.

James Swinehart

------------------------------------------------------------------------
What is your assessment of the assignment? Was it helpful? Was it fun?

It was easier than I expected

------------------------------------------------------------------------
(optional) What information can you provide about your submission that
will help your grader to grade it in the most favorable light? In
particular, what bugs are in your submission?

None that I know of

------------------------------------------------------------------------
What warnings does splint generate on symtablelist.c, and what are your
disagreements with them? Copy the splint warnings here, and express your
disagreement after each warning. If there are no warnings, then write
"None."

None besides sprintf, which we were told to ignore

------------------------------------------------------------------------
What warnings does critTer generate on symtablelist.c, and what are your
disagreements with them? Copy the critTer warnings here, and express
your disagreement after each warning. If there are no warnings, then
write "None."

symtablelist.c: line 84: medium priority:
Do you want to validate 'pvValue' through an assert?
No, I don't. A pvValue might legitimately be NULL. What if you want
to store a key with no value?


symtablelist.c: line 117: medium priority:
Do you want to validate 'pvValue' through an assert?
No, I don't. A pvValue might legitimately be NULL. What if you want
to store a key with no value?

symtablelist.c: line 219: medium priority:
Do you want to validate 'pvExtra' through an assert?
No, I don't. Sometimes pvExrtra is legitimately NULL.

------------------------------------------------------------------------
What warnings does splint generate on symtablehash.c, and what are your
disagreements with them? Copy the splint warnings here, and express your
disagreement after each warning. If there are no warnings, then write
"None."

symtablehash.c:95:37: Value oSymTable->ppsFirstNodes[] used before 
definition An rvalue is used that may not be initialized to a value on 
some execution path. (Use -usedef to inhibit warning)

On line 97, we access ppsFirstNodes[hash], which splint claims MAY be 
unititialized. However, we know that the buckets have already all been
initialized to be NULL starting on line 84, and initially in 
Symtable_new.

------------------------------------------------------------------------
What warnings does critTer generate on symtablehash.c, and what are your
disagreements with them? Copy the critTer warnings here, and express
your disagreement after each warning. If there are no warnings, then
write "None."

symtablehash.c: line 176: medium priority:
Do you want to validate 'pvValue' through an assert?
No, I don't. A pvValue might legitimately be NULL. What if you want
to store a key with no value?

symtablehash.c: line 224: medium priority:
Do you want to validate 'pvValue' through an assert?
No, I don't. A pvValue might legitimately be NULL. What if you want
to store a key with no value?

symtablehash.c: line 348: medium priority:
Do you want to validate 'pvExtra' through an assert?
No, I don't. Sometimes pvExrtra is legitimately NULL.

symtablehash.c: line 184: high priority: 
Use of magic number (509), which should be given a meaningful name
As in testsymtable.c, using magic numbers is clearer than the 
alternative of defining a constant for each possible bucket size.

symtablehash.c: line 184: high priority: 
Use of magic number (1021), which should be given a meaningful name
As in testsymtable.c, using magic numbers is clearer than the 
alternative of defining a constant for each possible bucket size.

symtablehash.c: line 185: high priority: 
Use of magic number (1021), which should be given a meaningful name
As in testsymtable.c, using magic numbers is clearer than the 
alternative of defining a constant for each possible bucket size.

symtablehash.c: line 185: high priority: 
Use of magic number (2039), which should be given a meaningful name
As in testsymtable.c, using magic numbers is clearer than the 
alternative of defining a constant for each possible bucket size.

symtablehash.c: line 186: high priority: 
Use of magic number (2039), which should be given a meaningful name
As in testsymtable.c, using magic numbers is clearer than the 
alternative of defining a constant for each possible bucket size.

symtablehash.c: line 186: high priority: 
Use of magic number (4093), which should be given a meaningful name
As in testsymtable.c, using magic numbers is clearer than the 
alternative of defining a constant for each possible bucket size.

symtablehash.c: line 187: high priority: 
Use of magic number (4093), which should be given a meaningful name
As in testsymtable.c, using magic numbers is clearer than the 
alternative of defining a constant for each possible bucket size.

symtablehash.c: line 187: high priority: 
Use of magic number (8191), which should be given a meaningful name
As in testsymtable.c, using magic numbers is clearer than the 
alternative of defining a constant for each possible bucket size.

symtablehash.c: line 188: high priority: 
Use of magic number (8191), which should be given a meaningful name
As in testsymtable.c, using magic numbers is clearer than the 
alternative of defining a constant for each possible bucket size.

symtablehash.c: line 188: high priority: 
Use of magic number (16381), which should be given a meaningful name
As in testsymtable.c, using magic numbers is clearer than the 
alternative of defining a constant for each possible bucket size.

symtablehash.c: line 189: high priority: 
Use of magic number (16381), which should be given a meaningful name
As in testsymtable.c, using magic numbers is clearer than the 
alternative of defining a constant for each possible bucket size.

symtablehash.c: line 189: high priority: 
Use of magic number (32749), which should be given a meaningful name
As in testsymtable.c, using magic numbers is clearer than the 
alternative of defining a constant for each possible bucket size.

symtablehash.c: line 190: high priority: 
Use of magic number (32749), which should be given a meaningful name
As in testsymtable.c, using magic numbers is clearer than the 
alternative of defining a constant for each possible bucket size.

symtablehash.c: line 190: high priority: 
Use of magic number (65521), which should be given a meaningful name
As in testsymtable.c, using magic numbers is clearer than the 
alternative of defining a constant for each possible bucket size.

------------------------------------------------------------------------
What are the CPU times reported by testsymtable.c with binding counts
50, 500, 5000, 50000, and 500000 using (1) your linked list
implementation, (2) your non-expanding hash table implementation, and
(3) your expanding hash table implementation? Fill in the blanks.

The linked list implementation with:
-- 50 bindings consumed 0.000000 seconds.
-- 500 bindings consumed 0.007569 seconds.
-- 5000 bindings consumed 1.134695 seconds.
-- 50000 bindings consumed 114.727294 seconds.
-- 500000 bindings consumed  seconds.

The non-expanding hash table implementation with:
-- 50 bindings consumed  seconds.
-- 500 bindings consumed  seconds.
-- 5000 bindings consumed  seconds.
-- 50000 bindings consumed  seconds.
-- 500000 bindings consumed  seconds.

The expanding hash table implementation with:
-- 50 bindings consumed  seconds.
-- 500 bindings consumed  seconds.
-- 5000 bindings consumed  seconds.
-- 50000 bindings consumed  seconds.
-- 500000 bindings consumed  seconds.
